[{"D:\\React\\Zip-files\\todolist-14\\src\\Todolist.tsx":"1","D:\\React\\Zip-files\\todolist-14\\src\\Task.tsx":"2","D:\\React\\Zip-files\\todolist-14\\src\\App.tsx":"3","D:\\React\\Zip-files\\todolist-14\\src\\state\\todolists-reducer.ts":"4","D:\\React\\Zip-files\\todolist-14\\src\\state\\store.ts":"5","D:\\React\\Zip-files\\todolist-14\\src\\state\\tasks-reducer.ts":"6","D:\\React\\Zip-files\\todolist-14\\src\\api\\todolists-api.ts":"7","D:\\React\\Zip-files\\todolist-14\\src\\index.tsx":"8","D:\\React\\Zip-files\\todolist-14\\src\\EditableSpan.tsx":"9","D:\\React\\Zip-files\\todolist-14\\src\\AddItemForm.tsx":"10"},{"size":3732,"mtime":1623475379700,"results":"11","hashOfConfig":"12"},{"size":1729,"mtime":1596062230000,"results":"13","hashOfConfig":"12"},{"size":4737,"mtime":1623512313736,"results":"14","hashOfConfig":"12"},{"size":4343,"mtime":1623502087225,"results":"15","hashOfConfig":"12"},{"size":967,"mtime":1623406948263,"results":"16","hashOfConfig":"12"},{"size":8048,"mtime":1629443215575,"results":"17","hashOfConfig":"12"},{"size":2519,"mtime":1623502389439,"results":"18","hashOfConfig":"12"},{"size":641,"mtime":1611409826000,"results":"19","hashOfConfig":"12"},{"size":952,"mtime":1594140324000,"results":"20","hashOfConfig":"12"},{"size":1474,"mtime":1594713320000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"50u2ab",{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\React\\Zip-files\\todolist-14\\src\\Todolist.tsx",["44","45","46","47","48","49"],"D:\\React\\Zip-files\\todolist-14\\src\\Task.tsx",["50","51","52"],"D:\\React\\Zip-files\\todolist-14\\src\\App.tsx",["53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69"],"import React, { useCallback, useEffect } from 'react'\r\nimport './App.css';\r\nimport { Todolist } from './Todolist';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistAC,\r\n    removeTodolistTC,\r\n    setTodolistsAC,\r\n    TodolistDomainType\r\n} from './state/todolists-reducer'\r\nimport { addTaskAC, addTaskTC, updateTaskAC, updateTaskTC, changeTaskTitleAC, removeTaskAC, removeTaskTC } from './state/tasks-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './state/store';\r\nimport { TaskStatuses, TaskType, todolistsAPI } from './api/todolists-api'\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskTC(todolistId, id))\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        // const action = changeTaskStatusAC(id, status, todolistId);\r\n        dispatch(updateTaskTC(id, {status: status}, todolistId));\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const action = updateTaskTC(id, {title: newTitle}, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodolistTC(id));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodolistTitleTC(id, title));\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{ padding: \"20px\" }}>\r\n                    <AddItemForm addItem={addTodolist} />\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{ padding: \"10px\" }}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","D:\\React\\Zip-files\\todolist-14\\src\\state\\todolists-reducer.ts",["70"],"D:\\React\\Zip-files\\todolist-14\\src\\state\\store.ts",[],"D:\\React\\Zip-files\\todolist-14\\src\\state\\tasks-reducer.ts",["71","72","73"],"import { AppRootStateType } from './store';\r\nimport { TasksStateType } from '../App';\r\nimport { v1 } from 'uuid';\r\nimport { AddTodolistActionType, RemoveTodolistActionType, SetTodolistActionType } from './todolists-reducer';\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../api/todolists-api'\r\nimport { Dispatch } from 'redux';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\n\r\n// export type AddTaskActionType = {\r\n//     type: 'ADD-TASK',\r\n//     todolistId: string\r\n//     title: string\r\n// }\r\n\r\nexport type UpdateTaskActionType = {\r\n    type: 'UPDATE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n    model: UpdateDomainTaskModelType\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\nexport type SetTasksActionType = {\r\n    type: 'SET-TASKS',\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | UpdateTaskActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistActionType\r\n    | SetTasksActionType\r\n\r\nconst initialState: TasksStateType = {\r\n    // \"todolistId1\": [\r\n    //     { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n    //         startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n    //     { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n    //         startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n    //     { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n    //         startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    // ],\r\n    // \"todolistId2\": [\r\n    //     { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n    //         startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n    //     { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n    //         startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n    //     { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n    //         startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    // ]\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = { ...state }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = { ...state }\r\n            const newTask: TaskType = action.task\r\n            const tasks = stateCopy[newTask.todoListId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[newTask.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'UPDATE-TASK': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? { ...t, ...action.model } : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({ ...state });\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? { ...t, title: action.title } : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({ ...state });\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = { ...state };\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = { ...state };\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n\r\n            return copyState;\r\n        }\r\n        case 'SET-TASKS': {\r\n            const copyState = { ...state };\r\n            copyState[action.todolistId] = action.tasks\r\n\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return { type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId }\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return { type: 'ADD-TASK', task }\r\n}\r\n// export const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n//     return { type: 'ADD-TASK', title, todolistId }\r\n// }\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string): UpdateTaskActionType => {\r\n    return { type: 'UPDATE-TASK', model, todolistId, taskId }\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return { type: 'CHANGE-TASK-TITLE', title, todolistId, taskId }\r\n}\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksActionType => {\r\n    return { type: 'SET-TASKS', tasks, todolistId }\r\n}\r\n\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                dispatch(setTasksAC(res.data.items, todolistId))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.deleteTask(todolistId, taskId)\r\n            .then(res => {\r\n                const action = removeTaskAC(taskId, todolistId);\r\n                dispatch(action);\r\n            })\r\n    }\r\n}\r\nexport const addTaskTC = (todolistId: string, taskTitle: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.createTask(todolistId, taskTitle)\r\n            .then(res => {\r\n                const action = addTaskAC(res.data.data.item);\r\n                dispatch(action);\r\n            })\r\n    }\r\n}\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if(!task) {\r\n            // throw new Error('task not found in the state')\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...domainModel // повтори\r\n        }\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC(taskId, domainModel, todolistId);\r\n                dispatch(action);\r\n            })\r\n    }\r\n}","D:\\React\\Zip-files\\todolist-14\\src\\api\\todolists-api.ts",[],"D:\\React\\Zip-files\\todolist-14\\src\\index.tsx",[],"D:\\React\\Zip-files\\todolist-14\\src\\EditableSpan.tsx",[],"D:\\React\\Zip-files\\todolist-14\\src\\AddItemForm.tsx",["74","75","76"],{"ruleId":"77","severity":1,"message":"78","line":32,"column":8,"nodeType":"79","endLine":32,"endColumn":10,"suggestions":"80"},{"ruleId":"77","severity":1,"message":"81","line":35,"column":8,"nodeType":"79","endLine":35,"endColumn":33,"suggestions":"82"},{"ruleId":"77","severity":1,"message":"81","line":42,"column":8,"nodeType":"79","endLine":42,"endColumn":45,"suggestions":"83"},{"ruleId":"77","severity":1,"message":"81","line":44,"column":86,"nodeType":"79","endLine":44,"endColumn":116,"suggestions":"84"},{"ruleId":"77","severity":1,"message":"81","line":45,"column":92,"nodeType":"79","endLine":45,"endColumn":122,"suggestions":"85"},{"ruleId":"77","severity":1,"message":"81","line":46,"column":98,"nodeType":"79","endLine":46,"endColumn":128,"suggestions":"86"},{"ruleId":"77","severity":1,"message":"81","line":15,"column":97,"nodeType":"79","endLine":15,"endColumn":130,"suggestions":"87"},{"ruleId":"77","severity":1,"message":"81","line":20,"column":8,"nodeType":"79","endLine":20,"endColumn":41,"suggestions":"88"},{"ruleId":"77","severity":1,"message":"81","line":24,"column":8,"nodeType":"79","endLine":24,"endColumn":41,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":8,"column":5,"nodeType":"92","messageId":"93","endLine":8,"endColumn":18},{"ruleId":"90","severity":1,"message":"94","line":11,"column":5,"nodeType":"92","messageId":"93","endLine":11,"endColumn":26},{"ruleId":"90","severity":1,"message":"95","line":15,"column":5,"nodeType":"92","messageId":"93","endLine":15,"endColumn":21},{"ruleId":"90","severity":1,"message":"96","line":17,"column":5,"nodeType":"92","messageId":"93","endLine":17,"endColumn":19},{"ruleId":"90","severity":1,"message":"97","line":20,"column":10,"nodeType":"92","messageId":"93","endLine":20,"endColumn":19},{"ruleId":"90","severity":1,"message":"98","line":20,"column":32,"nodeType":"92","messageId":"93","endLine":20,"endColumn":44},{"ruleId":"90","severity":1,"message":"99","line":20,"column":60,"nodeType":"92","messageId":"93","endLine":20,"endColumn":77},{"ruleId":"90","severity":1,"message":"100","line":20,"column":79,"nodeType":"92","messageId":"93","endLine":20,"endColumn":91},{"ruleId":"90","severity":1,"message":"101","line":23,"column":34,"nodeType":"92","messageId":"93","endLine":23,"endColumn":46},{"ruleId":"77","severity":1,"message":"102","line":39,"column":8,"nodeType":"79","endLine":39,"endColumn":10,"suggestions":"103"},{"ruleId":"77","severity":1,"message":"104","line":43,"column":8,"nodeType":"79","endLine":43,"endColumn":10,"suggestions":"105"},{"ruleId":"77","severity":1,"message":"104","line":47,"column":8,"nodeType":"79","endLine":47,"endColumn":10,"suggestions":"106"},{"ruleId":"77","severity":1,"message":"104","line":52,"column":8,"nodeType":"79","endLine":52,"endColumn":10,"suggestions":"107"},{"ruleId":"77","severity":1,"message":"104","line":57,"column":8,"nodeType":"79","endLine":57,"endColumn":10,"suggestions":"108"},{"ruleId":"77","severity":1,"message":"104","line":62,"column":8,"nodeType":"79","endLine":62,"endColumn":10,"suggestions":"109"},{"ruleId":"77","severity":1,"message":"104","line":66,"column":8,"nodeType":"79","endLine":66,"endColumn":10,"suggestions":"110"},{"ruleId":"77","severity":1,"message":"104","line":70,"column":8,"nodeType":"79","endLine":70,"endColumn":10,"suggestions":"111"},{"ruleId":"90","severity":1,"message":"112","line":2,"column":10,"nodeType":"92","messageId":"93","endLine":2,"endColumn":12},{"ruleId":"90","severity":1,"message":"112","line":3,"column":10,"nodeType":"92","messageId":"93","endLine":3,"endColumn":12},{"ruleId":"90","severity":1,"message":"113","line":5,"column":10,"nodeType":"92","messageId":"93","endLine":5,"endColumn":24},{"ruleId":"90","severity":1,"message":"114","line":5,"column":26,"nodeType":"92","messageId":"93","endLine":5,"endColumn":38},{"ruleId":"90","severity":1,"message":"115","line":2,"column":9,"nodeType":"92","messageId":"93","endLine":2,"endColumn":12},{"ruleId":"90","severity":1,"message":"116","line":2,"column":14,"nodeType":"92","messageId":"93","endLine":2,"endColumn":20},{"ruleId":"90","severity":1,"message":"117","line":2,"column":22,"nodeType":"92","messageId":"93","endLine":2,"endColumn":33},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.","ArrayExpression",["118"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["119"],["120"],["121"],["122"],["123"],["124"],["125"],["126"],"@typescript-eslint/no-unused-vars","'addTodolistAC' is defined but never used.","Identifier","unusedVar","'changeTodolistTitleAC' is defined but never used.","'removeTodolistAC' is defined but never used.","'setTodolistsAC' is defined but never used.","'addTaskAC' is defined but never used.","'updateTaskAC' is defined but never used.","'changeTaskTitleAC' is defined but never used.","'removeTaskAC' is defined but never used.","'todolistsAPI' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["127"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["128"],["129"],["130"],["131"],["132"],["133"],["134"],"'v1' is defined but never used.","'TaskPriorities' is defined but never used.","'TaskStatuses' is defined but never used.","'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.",{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"137","fix":"139"},{"desc":"137","fix":"140"},{"desc":"137","fix":"141"},{"desc":"137","fix":"142"},{"desc":"137","fix":"143"},{"desc":"137","fix":"144"},{"desc":"137","fix":"145"},{"desc":"146","fix":"147"},{"desc":"146","fix":"148"},{"desc":"146","fix":"149"},{"desc":"146","fix":"150"},{"desc":"146","fix":"151"},{"desc":"146","fix":"152"},{"desc":"146","fix":"153"},{"desc":"146","fix":"154"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"155","text":"156"},"Update the dependencies array to be: [props]",{"range":"157","text":"158"},{"range":"159","text":"158"},{"range":"160","text":"158"},{"range":"161","text":"158"},{"range":"162","text":"158"},{"range":"163","text":"158"},{"range":"164","text":"158"},{"range":"165","text":"158"},"Update the dependencies array to be: [dispatch]",{"range":"166","text":"167"},{"range":"168","text":"167"},{"range":"169","text":"167"},{"range":"170","text":"167"},{"range":"171","text":"167"},{"range":"172","text":"167"},{"range":"173","text":"167"},{"range":"174","text":"167"},[1287,1289],"[dispatch, props.id]",[1393,1418],"[props]",[1631,1668],[1758,1788],[1882,1912],[2012,2042],[721,754],[1027,1060],[1217,1250],[1345,1347],"[dispatch]",[1487,1489],[1631,1633],[1888,1890],[2106,2108],[2310,2312],[2430,2432],[2582,2584]]